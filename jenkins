https://www.youtube.com/watch?v=gdbA3vR2eDs
https://github.com/CJRivas/jenkinspipeline/blob/master/Jenkinsfile
https://github.com/jleetutorial/maven-project
https://jenkins.io/doc/book/pipeline/jenkinsfile/

Sample pipeline code
	https://github.com/jleetutorial/maven-project/blob/v0.1/Jenkinsfile
	https://github.com/jleetutorial/maven-project/blob/v0.2/Jenkinsfile
	https://github.com/jleetutorial/maven-project/blob/v0.3/Jenkinsfile

https://www.udemy.com/the-complete-jenkins-course-for-developers-and-devops/learn/v4/questions/3353186
https://www.udemy.com/the-complete-jenkins-course-for-developers-and-devops/learn/v4/questions/3477078

Installing Jenkins
==================================================================
============================================================================================
sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key
sudo yum install java-1.8.0 -y
sudo yum remove java-1.7.0-openjdk -y
sudo yum install jenkins -y
sudo service jenkins start
sudo chkconfig jenkins on
sudo cat /var/lib/jenkins/secrets/initialAdminPassword
sudo yum install docker -y
sudo service docker start
sudo chkconfig docker on
sudo usermod -a -G docker ec2-user
sudo usermod -a -G docker jenkins
sudo yum install java-devel  -Y 
sudo -u jenkins docker run hello-world
sudo yum install git -y
============================================================================================   
Manage Jenkins/Global Tool Congifuration/Maven -> Add Maven ->
PipeLine Syntax:
				1. Sample Step:- 
						tool: Use a tool from predefined Tool Installation
						Tool Type: Maven
						Tool: maven-3.5.4
						Generate Pipeline script
============================================================================================   
-> Now to the EC2 Console and for the EC2 modify the security group and add 8080 in the incoming requests


https://github.com/javahometech/my-app
http://ec2-52-66-189-195.ap-south-1.compute.amazonaws.com:8080/job/test-app-1/2/console
============================================================================================   

node
{
    stage('SCM CheckOut')
    {
        git 'https://github.com/javahometech/my-app'
    }
    stage('MVN Package')
    {
	    def mvnHome = tool name: 'MavenPlugin3.5.4', type: 'maven'
      def mvnCMD ="${mvnHome}/bin/mvn"
      sh "${mvnCMD} clean package" 
    }
    stage ('Build Docker Image')
    {
      sh 'docker build -t ggarg/my-app:2.0.0 .'
    }
   stage ('Push Docker Image')
   {
        withCredentials([string(credentialsId: 'DockerHubPasswordv1', variable: 'dockerHubPasswordv1')]) {
            sh "docker login -u ggarg -p ${dockerHubPasswordv1}"
        }       
     sh 'docker push ggarg/my-app:2.0.0'
   }    
   stage('Run Container on Dev Server')
   {
       def dockerRun = 'sudo docker run -p 8080:8080 -d --name my-app ggarg/my-app:2.0.0'
       sshagent(['ec2-user-deployment'])
       {
         sh "ssh -o StrictHostKeyChecking=no ec2-user@172.31.27.176 ${dockerRun}"
       }
   }
}


node
{
    stage('SCM CheckOut')
    {
        git credentialsId: 'git-hub-connection-details', url: 'https://github.com/gg1980/my-app'
    }
stage('MVN Package')
    {
        
	    def mvnHome = tool name: 'maven-3.5.4', type: 'maven'
        def mvnCMD ="${mvnHome}/bin/mvn"
        sh "${mvnCMD} clean package" 
    }
    stage ('Build Docker Image')
    {
      sh 'docker build -t ggarg/my-app:2.0.0 .'
    }
   stage ('Push Docker Image')
   {
        withCredentials([string(credentialsId: 'dockerHubPasswordv1', variable: 'dockerHubPasswordv1')]) {
            sh "docker login -u ggarg -p ${dockerHubPasswordv1}"
        }       
     sh 'docker push ggarg/my-app:2.0.0'
   }    
   stage('Run Container on Dev Server')
   {
       def dockerRm = 'sudo docker rm --force my-ggarg-app'
       def dockerRun = 'sudo docker run --rm -p 8080:8080 -d --name my-ggarg-app ggarg/my-app:2.0.0 '
       sshagent(['ec2-user-deployment'])
       {
         sh "ssh -o StrictHostKeyChecking=no ec2-user@172.31.27.176 ${dockerRm}"
         sh "ssh -o StrictHostKeyChecking=no ec2-user@172.31.27.176 ${dockerRun}"
       }
   }
   
}


////////////////////////////////////////////////////////Taking decision based on input parameter Start//////////////
pipeline {
    agent any
    parameters
	{
    
        choice(name: 'CHOICE', choices: ['One', 'Two', 'Three'], description: 'Pick something')
	}
	environment
	{
		test='default'
	}
	stages {
        stage('Example')
        {
            steps {
                echo "Print: ${test}"
                echo "Choice: ${params.CHOICE}"
                }
        }
        stage ('Main Stage')
		{
            steps {
                script {
                    if (params.CHOICE=='One') 
					{
						test=' one modified'
                        stage ('Stage 1') {
                            sh "echo Stage 1 ${test}"
                        }
                    }
                    if (params.CHOICE=='Two') {
						test=' two modified'	
                        stage ('Stage 2') {
                            sh "echo Stage 2 ${test}"
                        }
                    }
                }
            }
        }
        stage('Final')
        {
            steps {
                sh " echo ${test}"
                }
        }
    }
}
////////////////////////////////////////////////////////Taking decision based on input parameter END//////////////




